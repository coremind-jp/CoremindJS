cm.Class.using("cm.core.UserAgent");
cm.Class.using("cm.browser.BrowserInterface");
cm.Class.using("cm.display.AbsDrawable");
cm.Class.create(
{
    /** @name cm.display */
    $name:"cm.display.Drawable3DCss3Impl",
    $extends:"cm.display.impl.DrawableCssImpl",
    $static:
    {
        TRANSFORM:"$eval:'-' + cm.core.UserAgent.vendorPrefix + '-transform'",
        TRANSFORM_ORIGIN:"$eval:'-' + cm.core.UserAgent.vendorPrefix + '-transform-origin'",
        GRADIENT:"$eval:'-' + cm.core.UserAgent.vendorPrefix + '-' + cm.core.UserAgent.vendorPrefix == 'moz' ? 'linear-': '' + 'gradient'"
    },
    $define:
    /** @lends cm.display.DrawableCss3Impl.prototype */
    {
        mStyleText:"",
        
        Drawable3DCss3Impl:function(target)
        {
            if (!target.style)
                cm.log.e("target has not property [style]");
                
            this.mIndex = {};
            
            if (!cm.equal.isUndefined(target.cmDisplay.layout))
                this.registerCss("layout", this._getDefaultLayout());
                
            if (!cm.equal.isUndefined(target.cmDisplay.container))
                this.registerCss("container");
                
            target.cmDisplay.drawable.draw();
        },
        destroy:function()
        {
            for (var p in this.mIndex)
                cm.browser.BrowserInterface.removeCssRule(this.mIndex[p]);
        },
        
        
        registerCss:function(category, defaultCssText)
        {
            var _className = category + this.getRefCount();
            
            this.mTarget.className = this.mTarget.className ?
                 this.mTarget.className + " " + _className: _className;
                 
            this.mIndex[category] = cm.browser.BrowserInterface.getCssRuleLength();
            
            cm.browser.BrowserInterface.appendCssRule(
                _className, defaultCssText, this.mIndex[category]);
        },
        
        _getDefaultLayout:function()
        {
            return cm.string.concat(
                cm.display.DrawableCss3Impl.TRANSFORM,
                ":translateX(0px) translateY(0px) translateZ(0px)",
                " scaleX(1) scaleY(1) scaleZ(1)",
                " rotateX(0deg) rotateY(0deg) rotateZ(0deg);");
        },
        
        _getDefaultContainer:function()
        {
            return cm.string.concat(
                "width:0px; height:0px; ",
                "background-color:transparent; background-image:none;");
        },
        
        updateWidth:function(val) {
            this.mStyleText = this.mStyleText.replace(
                /width:[\d|\.]+px;/,
                cm.string.concat("width:", val, "px;"));
        },
        
        updateHeight:function(val) {
            this.mStyleText = this.mStyleText.replace(
                /height: [\d|\.]+px;/,
                cm.string.concat("height: ", val, "px;"));
        },
        
        updateColor:function(val)
        {
            if (val.length == 1)
            {
                var _color = val[0];
                this.mStyleText = this.mStyleText.replace(
                    /background-color:#([\d|A-F|a-f]{6}|transparent);/,
                    cm.string.concat("background-color:",
                        _color.aHex() == 0 ?
                            "transparent":
                            "#" + _color.rgb().toString(16), ";"));
            }
            else
            {
                cm.browser.BrowserInterface.getGradientCssText()
            }
        },
        
        updateImage:function() {
            
        },
        
        beginDraw:function() {
        },
        
        draw:function()
        {
            this._beginDraw();
            
            this.mStyleText = cm.browser.BrowserInterface.getCssRule(this.mIndex.layout);
            this._updateLayout(this.mTarget.cmDisplay.layout);
            cm.browser.BrowserInterface.modifyCssRule(this.mIndex.layout, this.mStyleText);
            
            this.mStyleText = cm.browser.BrowserInterface.getCssRule(this.mIndex.container);
            this._updateContainer(this.mTarget.cmDisplay.container);
            cm.browser.BrowserInterface.modifyCssRule(this.mIndex.container, this.mStyleText);
            
            this._endDraw();
        },
        
        endDraw:function(){
        },
        
        //Position
        updateX:function(val) {
            this.mStyleText = this.mStyleText.replace(
                /translateX\([\d|\.]+px\)/,
                cm.string.concat("translateX(", val, "px)"));
        },
        updateY:function(val) {
            this.mStyleText = this.mStyleText.replace(
                /translateY\([\d|\.]+px\)/,
                cm.string.concat("translateY(", val, "px)"));
        },
        updateZ:function(val) {
            this.mStyleText = this.mStyleText.replace(
                /translateZ\([\d|\.]+px\)/,
                cm.string.concat("translateZ(", val, "px)"));
        },
        
        
        //Scale
        updateScaleX:function(val) {
            this.mStyleText = this.mStyleText.replace(
                /scaleX\([\d|\.]+\)/,
                cm.string.concat("scaleX(", val, ")"));
        },
        updateScaleY:function(val) {
            this.mStyleText = this.mStyleText.replace(
                /scaleY\([\d|\.]+\)/,
                cm.string.concat("scaleY(", val, ")"));
        },
        updateScaleZ:function(val) {
            this.mStyleText = this.mStyleText.replace(
                /scaleZ\([\d|\.]+\)/,
                cm.string.concat("scaleZ(", val, ")"));
        },
        
        
        //Rotation
        updateRotationX:function(val) {
            this.mStyleText = this.mStyleText.replace(
                /rotateX\([\d|\.]+deg\)/,
                cm.string.concat("rotateX(", val, "deg)"));
        },
        updateRotationY:function(val) {
            this.mStyleText = this.mStyleText.replace(
                /rotateY\([\d|\.]+deg\)/,
                cm.string.concat("rotateY(", val, "deg)"));
        },
        updateRotationZ:function(val) {
            this.mStyleText = this.mStyleText.replace(
                /rotateZ\([\d|\.]+deg\)/,
                cm.string.concat("rotateZ(", val, "deg)"));
        },
        
        
        //origin
        updateOriginX:function(val) {
            this.mStyleText = this.mStyleText.replace(/origin:[\d|\.]+%/,
                cm.string.concat("origin:", val, "%"));
        },
        updateOriginY:function(val) {
            this.mStyleText = this.mStyleText.replace(/ [\d|\.]+%;/,
                cm.string.concat(" ", val, "%;"));
        }
    }
});